{
	"info": {
		"_postman_id": "9f8adfcf-f42f-4d10-8c09-d0fc4339b206",
		"name": "Groups_APIs Test",
		"description": "The Group APIs is a collection of API's for creation and management of learning groups in sunbird platform.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "4875988",
		"_collection_link": "https://dark-star-147860.postman.co/workspace/LernBBAPIs~32e17cc4-6806-407e-b8ef-485ad4d0b712/collection/4875988-9f8adfcf-f42f-4d10-8c09-d0fc4339b206?action=share&source=collection_link&creator=4875988"
	},
	"item": [
		{
			"name": "HealthCheck",
			"item": [
				{
					"name": "HealthCheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResponse = pm.response.json();",
									"",
									"// Verification",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test(\"Test data type of the response and keys\", () => {",
									"    pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys(",
									"        'id', 'ver', 'ts', 'params', 'responseCode', 'result'",
									"    );",
									"",
									"    pm.expect(jsonResponse.id).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.ver).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.ts).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
									"",
									"    pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys(",
									"        'resmsgid', 'msgid', 'status', 'err', 'errmsg'",
									"    );",
									"",
									"    pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.params.msgid).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.params.err).to.be.null;",
									"    pm.expect(jsonResponse.params.errmsg).to.be.null;",
									"",
									"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(",
									"        'name', 'version', 'healthy', 'check'",
									"    );",
									"",
									"    pm.expect(jsonResponse.result.name).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.result.version).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.result.healthy).to.be.a(\"boolean\");",
									"    pm.expect(jsonResponse.result.check).to.be.an(\"array\");",
									"});",
									"",
									"// Validation",
									"pm.test(\"id should be portal.Health.API\", function () {",
									"    pm.expect(jsonResponse.id).to.eql(\"portal.Health.API\");",
									"});",
									"",
									"pm.test(\"ver should be 1.0\", function () {",
									"    pm.expect(jsonResponse.ver).to.eql(\"1.0\");",
									"});",
									"",
									"pm.test(\"responseCode should be OK\", function () {",
									"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{host}}/health"
					},
					"response": []
				}
			]
		},
		{
			"name": "AuthToken",
			"item": [
				{
					"name": "UserToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResponse = pm.response.json();",
									"",
									"// Set global variable",
									"// pm.variables.set('refresh_token', jsonResponse.refresh_token);",
									"// pm.globals.set(\"refresh_token\", jsonResponse.result.identifier);",
									"pm.collectionVariables.set(\"refresh_token\", jsonResponse.refresh_token);",
									"// pm.collectionVariables.set(\"variable_key\", \"variable_value\");",
									"",
									"// Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Access token is present\", () => {",
									"    pm.expect(jsonResponse).to.have.property('access_token');",
									"});",
									"",
									"pm.test(\"Token type is bearer\", () => {",
									"    pm.expect(jsonResponse.token_type).to.eql('bearer');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Cookie",
								"value": "connect.sid=s%3Ad3chYLP8OfuB2bWgfEFohiWpDxM7GFol.gOPmzH3d2nP9enZ5qSHlVx1e%2BozTleCjXtfz7LUycCk"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": "{{host}}/auth/realms/sunbird/protocol/openid-connect/token"
					},
					"response": []
				},
				{
					"name": "RefreshToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract the locationId from the response and set it to the environment variable",
									"pm.test(\"Set access_token in environment variable\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"keycloak_access_token\", responseJson.result.access_token);",
									"});",
									"",
									"let jsonResponse = pm.response.json();",
									"",
									"// Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"// Validation",
									"pm.test(\"id should be api.refresh.token\", function () {",
									"   pm.expect(jsonResponse.id).to.eql(\"api.refresh.token\");",
									"});",
									"",
									"pm.test(\"ver should be 1.0\", function () {",
									"   pm.expect(jsonResponse.ver).to.eql(\"1.0\");",
									"});",
									"",
									"pm.test(\"params.status should be successful\", function () {",
									"    pm.expect(jsonResponse.params.status).to.eql(\"successful\");",
									"});",
									"",
									"// Validate result properties",
									"pm.test(\"result should have necessary properties\", function () {",
									"    pm.expect(jsonResponse.result).to.have.property(\"access_token\");",
									"    pm.expect(jsonResponse.result).to.have.property(\"expires_in\");",
									"    pm.expect(jsonResponse.result).to.have.property(\"refresh_expires_in\");",
									"    pm.expect(jsonResponse.result).to.have.property(\"refresh_token\");",
									"});",
									"",
									"// Additional validation for specific properties",
									"pm.test(\"access_token should be a non-empty string\", function () {",
									"    pm.expect(jsonResponse.result.access_token).to.be.a(\"string\").and.not.empty;",
									"});",
									"",
									"pm.test(\"expires_in should be a positive number\", function () {",
									"    pm.expect(jsonResponse.result.expires_in).to.be.a(\"number\").and.above(0);",
									"});",
									"",
									"pm.test(\"refresh_expires_in should be a positive number\", function () {",
									"    pm.expect(jsonResponse.result.refresh_expires_in).to.be.a(\"number\").and.above(0);",
									"});",
									"",
									"pm.test(\"refresh_token should be a non-empty string\", function () {",
									"    pm.expect(jsonResponse.result.refresh_token).to.be.a(\"string\").and.not.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Cookie",
								"value": "connect.sid=s%3Ad3chYLP8OfuB2bWgfEFohiWpDxM7GFol.gOPmzH3d2nP9enZ5qSHlVx1e%2BozTleCjXtfz7LUycCk"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "refresh_token",
									"value": "{{refresh_token}}",
									"type": "text"
								}
							]
						},
						"url": "{{host}}/auth/v1/refresh/token"
					},
					"response": []
				}
			]
		},
		{
			"name": "Positive",
			"item": [
				{
					"name": "CreateGroup",
					"item": [
						{
							"name": "200 - With minimum required input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extract the groupId from the response and set it to the environment variable",
											"pm.test(\"Set groupId in environment variable\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.environment.set(\"group_id\", responseJson.result.groupId);",
											"});",
											"",
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Test data type of the response and keys\", () => {",
											"    pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys(",
											"        'id', 'ver', 'ts', 'params', 'result', 'responseCode'",
											"    );",
											"",
											"    pm.expect(jsonResponse.id).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ver).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ts).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.responseCode).to.be.a(\"number\");",
											"",
											"    pm.expect(jsonResponse.params).to.be.null;",
											"",
											"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(",
											"        'groupId'",
											"    );",
											"",
											"    pm.expect(jsonResponse.result.groupId).to.be.a(\"string\");",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should be api.group.create\", function () {",
											"    pm.expect(jsonResponse.id).to.eql(\"api.group.create\");",
											"});",
											"",
											"pm.test(\"ver should be v1\", function () {",
											"    pm.expect(jsonResponse.ver).to.eql(\"v1\");",
											"});",
											"",
											"pm.test(\"responseCode should be 200\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"name\": \"{{group_name}}\"\n    }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/group/v1/create",
								"description": "This API is used to create a group\n   - The endpoint for **Create Group** is `/group/v1/create`  \n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					]
				},
				{
					"name": "ListGroup",
					"item": [
						{
							"name": "200 - With minimum required input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Test data type of the response and keys\", () => {",
											"    pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys(",
											"        'id', 'ver', 'ts', 'params', 'result', 'responseCode'",
											"    );",
											"",
											"    pm.expect(jsonResponse.id).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ver).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ts).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.responseCode).to.be.a(\"number\");",
											"",
											"    pm.expect(jsonResponse.params).to.be.null;",
											"",
											"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.key('group');",
											"    pm.expect(jsonResponse.result.group).to.be.an(\"array\").that.is.not.empty;",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should be api.group.list\", function () {",
											"    pm.expect(jsonResponse.id).to.eql(\"api.group.list\");",
											"});",
											"",
											"pm.test(\"ver should be v1\", function () {",
											"    pm.expect(jsonResponse.ver).to.eql(\"v1\");",
											"});",
											"",
											"pm.test(\"responseCode should be 200\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"filters\": {\n            \"userId\": \"{{user_id}}\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/group/v1/list",
								"description": "This API is used for listing groups of a particular user.\n  - The endpoint for **List Group** is `/group/v1/list`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					]
				},
				{
					"name": "UpdateGroup",
					"item": [
						{
							"name": "200 - With minimum required input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Test data type of the response and keys\", () => {",
											"    pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys(",
											"        'id', 'ver', 'ts', 'params', 'result', 'responseCode'",
											"    );",
											"",
											"    pm.expect(jsonResponse.id).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ver).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ts).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.responseCode).to.be.a(\"number\");",
											"",
											"    pm.expect(jsonResponse.params).to.be.null;",
											"",
											"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.key('response');",
											"    pm.expect(jsonResponse.result.response).to.be.a(\"string\");",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should be api.group.update\", function () {",
											"    pm.expect(jsonResponse.id).to.eql(\"api.group.update\");",
											"});",
											"",
											"pm.test(\"ver should be v1\", function () {",
											"    pm.expect(jsonResponse.ver).to.eql(\"v1\");",
											"});",
											"",
											"pm.test(\"responseCode should be 200\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(200);",
											"});",
											"",
											"pm.test(\"result.response should be 'success'\", function () {",
											"    pm.expect(jsonResponse.result.response).to.eql(\"success\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"groupId\": \"{{group_id}}\",\n        \"name\": \"{{group_name}}\"\n    }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/group/v1/update",
								"description": "This API is used for updating the group related details. This can also be used to add/edit/remove members of a group and also to add/remove activitties of a group. This API can add details partially as well, for example, one member in the request could not be added, because that member is inactive or id doesn't exist, still other properties in the request is updated. If a member is not added, only the status of that will be shown in the “errors” array in response.\n  - The endpoint for **Update Group** is `/group/v1/update`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.\n  - Once group suspended following operation can only be performed :-\n    1. All member are eligible to leave the group. \n    2. Creator will be able to delete the group.\n    3. Admin will be able to reactivate the group.\n    4. All other operations are not permitted once group is suspended."
							},
							"response": []
						}
					]
				},
				{
					"name": "ReadGroup",
					"item": [
						{
							"name": "200 - With minimum required input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Test data type of the response and keys\", () => {",
											"    pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys(",
											"        'id', 'ver', 'ts', 'params', 'result', 'responseCode'",
											"    );",
											"",
											"    pm.expect(jsonResponse.id).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ver).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ts).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.responseCode).to.be.a(\"number\");",
											"",
											"    pm.expect(jsonResponse.params).to.be.null;",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should be api.group.read\", function () {",
											"    pm.expect(jsonResponse.id).to.eql(\"api.group.read\");",
											"});",
											"",
											"pm.test(\"ver should be v1\", function () {",
											"    pm.expect(jsonResponse.ver).to.eql(\"v1\");",
											"});",
											"",
											"pm.test(\"responseCode should be 200\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"url": "{{host}}/api/group/v1/read/{{group_id}}",
								"description": "This API is used for getting a specific group, it is based on the unique ID of the group\n  - The endpoint for **Get Group by Group ID** is `/group/v1/read/{groupId}`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.\n  - User can pass an optional query parameter 'fields'. The value is a comma separated list of fields whose information is required in response. e.g. fields=members,activities\n  - 'members' is to return all the members of the group.\n  - 'activities' is to return all the activities of the group along with activity information from search service."
							},
							"response": []
						}
					]
				},
				{
					"name": "DeleteGroup",
					"item": [
						{
							"name": "200 - With minimum required input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header is present\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Test data type of the response and keys\", () => {",
											"    pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys(",
											"        'id', 'ver', 'ts', 'params', 'result', 'responseCode'",
											"    );",
											"",
											"    pm.expect(jsonResponse.id).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ver).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.ts).to.be.a(\"string\");",
											"    pm.expect(jsonResponse.responseCode).to.be.a(\"number\");",
											"",
											"    pm.expect(jsonResponse.params).to.be.null;",
											"",
											"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(",
											"        'response'",
											"    );",
											"",
											"    pm.expect(jsonResponse.result.response).to.be.a(\"string\");",
											"});",
											"",
											"// Validation",
											"pm.test(\"id should be api.group.delete\", function () {",
											"    pm.expect(jsonResponse.id).to.eql(\"api.group.delete\");",
											"});",
											"",
											"pm.test(\"ver should be v1\", function () {",
											"    pm.expect(jsonResponse.ver).to.eql(\"v1\");",
											"});",
											"",
											"pm.test(\"responseCode should be 200\", function () {",
											"    pm.expect(jsonResponse.responseCode).to.eql(200);",
											"});",
											"",
											"pm.test(\"result.response should be SUCCESS\", function () {",
											"    pm.expect(jsonResponse.result.response).to.eql(\"SUCCESS\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"groupId\": \"{{group_id}}\"\n    }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/group/v1/delete",
								"description": "This API is used for deleting the groups .\n  - The endpoint for **Delete Group** is `/group/v1/delete`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.\n  "
							},
							"response": []
						}
					]
				},
				{
					"name": "UpdateGroupMembership",
					"item": [
						{
							"name": "UpdateGroupMembership",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n    \"userId\": \"{{user_id}}\",\n    \"groups\": [\n      {\n        \"groupId\": \"{{group_id}}\",\n        \"visited\": true\n      }\n    ]\n  }\n}"
								},
								"url": "{{host}}/api/group/membership/v1/update"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "CreateGroup",
					"item": [
						{
							"name": "400 - missing group name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Validation",
											"// Verify params",
											"pm.test(\"params.err should be \\\"GS_CRT02\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"GS_CRT02\");",
											"});",
											"pm.test(\"params.errmsg should be \\\"Failed to create group, fields are missing or invalid in the request. Enter the required values and resend the request.\\\"\", () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Failed to create group, fields are missing or invalid in the request. Enter the required values and resend the request.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"description\": \"{{group_description}}\"\n    }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/group/v1/create",
								"description": "This API is used to create a group\n   - The endpoint for **Create Group** is `/group/v1/create`  \n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					]
				},
				{
					"name": "ListGroup",
					"item": [
						{
							"name": "400 - missing filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Validation",
											"// Verify params",
											"pm.test(\"params.err should be \\\"GS_LST02\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"GS_LST02\");",
											"});",
											"pm.test(\"params.errmsg should be \\\"Failed to fetch group list, mandatory fields are missing or invalid fields value in the request. Enter the required values and resend the request.\\\"\", () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Failed to fetch group list, mandatory fields are missing or invalid fields value in the request. Enter the required values and resend the request.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"filters\": {}\n    }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/group/v1/list",
								"description": "This API is used for listing groups of a particular user.\n  - The endpoint for **List Group** is `/group/v1/list`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
							},
							"response": []
						}
					]
				},
				{
					"name": "UpdateGroup",
					"item": [
						{
							"name": "400 -  Missing group id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Validation",
											"// Verify params",
											"pm.test(\"params.err should be \\\"GS_UDT02\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"GS_UDT02\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"name\": \"{{group_name}}\",\n        \"description\": \"{{group_description}}\"\n    }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/group/v1/update",
								"description": "This API is used for updating the group related details. This can also be used to add/edit/remove members of a group and also to add/remove activitties of a group. This API can add details partially as well, for example, one member in the request could not be added, because that member is inactive or id doesn't exist, still other properties in the request is updated. If a member is not added, only the status of that will be shown in the “errors” array in response.\n  - The endpoint for **Update Group** is `/group/v1/update`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.\n  - Once group suspended following operation can only be performed :-\n    1. All member are eligible to leave the group. \n    2. Creator will be able to delete the group.\n    3. Admin will be able to reactivate the group.\n    4. All other operations are not permitted once group is suspended."
							},
							"response": []
						},
						{
							"name": "400 -  Invalid group id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify params",
											"pm.test(\"params.err should be \\\"GS_UDT07\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"GS_UDT07\");",
											"});",
											"pm.test(\"params.errmsg should be \\\"Failed to update, group does not exist. Contact your system administrator.\\\"\", () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Failed to update, group does not exist. Contact your system administrator.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"groupId\": \"aaaaaaa\",\n        \"name\": \"{{group_name}}\",\n        \"description\": \"{{group_description}}\"\n    }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/group/v1/update",
								"description": "This API is used for updating the group related details. This can also be used to add/edit/remove members of a group and also to add/remove activitties of a group. This API can add details partially as well, for example, one member in the request could not be added, because that member is inactive or id doesn't exist, still other properties in the request is updated. If a member is not added, only the status of that will be shown in the “errors” array in response.\n  - The endpoint for **Update Group** is `/group/v1/update`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.\n  - Once group suspended following operation can only be performed :-\n    1. All member are eligible to leave the group. \n    2. Creator will be able to delete the group.\n    3. Admin will be able to reactivate the group.\n    4. All other operations are not permitted once group is suspended."
							},
							"response": []
						}
					]
				},
				{
					"name": "ReadGroup",
					"item": [
						{
							"name": "400 -  Invalid group id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify params",
											"pm.test(\"params.err should be \\\"GS_RED07\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"GS_RED07\");",
											"});",
											"pm.test(\"params.errmsg should be \\\"Failed to read details, group not found. Contact your system administrator.\\\"\", () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Failed to read details, group not found. Contact your system administrator.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"url": "{{host}}/api/group/v1/read/aaa",
								"description": "This API is used for getting a specific group, it is based on the unique ID of the group\n  - The endpoint for **Get Group by Group ID** is `/group/v1/read/{groupId}`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.\n  - User can pass an optional query parameter 'fields'. The value is a comma separated list of fields whose information is required in response. e.g. fields=members,activities\n  - 'members' is to return all the members of the group.\n  - 'activities' is to return all the activities of the group along with activity information from search service."
							},
							"response": []
						}
					]
				},
				{
					"name": "DeleteGroup",
					"item": [
						{
							"name": "400 - Invalid group id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"// Verification",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Validation",
											"// Verify params",
											"pm.test(\"params.err should be \\\"GS_DLT07\\\"\", () => {",
											"    pm.expect(jsonResponse.params.err).to.eql(\"GS_DLT07\");",
											"});",
											"pm.test(\"params.errmsg should be \\\"Failed to delete, group not found. Contact your system administrator.\\\"\", () => {",
											"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Failed to delete, group not found. Contact your system administrator.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"groupId\": \"aaaa\"\n    }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{host}}/api/group/v1/delete",
								"description": "This API is used for deleting the groups .\n  - The endpoint for **Delete Group** is `/group/v1/delete`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.\n  "
							},
							"response": []
						}
					]
				},
				{
					"name": "UpdateGroupMembership",
					"item": [
						{
							"name": "UpdateGroupMembership",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n    \"userId\": \"{{user_id}}\",\n    \"groups\": [\n      {\n        \"groupId\": \"{{group_id}}\",\n        \"visited\": true\n      }\n    ]\n  }\n}"
								},
								"url": "{{host}}/api/group/membership/v1/update"
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function generateRandomGroupName() {",
					"    const adjectives = ['Advanced', 'Beginner', 'Intermediate', 'Expert', 'Pro', 'Novice', 'Skilled', 'Enthusiastic'];",
					"    const subjects = ['Math', 'Science', 'History', 'Literature', 'Programming', 'Languages', 'Art', 'Music'];",
					"    const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];",
					"    const randomSubject = subjects[Math.floor(Math.random() * subjects.length)];",
					"    const randomNumber = Math.floor(Math.random() * 1000);",
					"    ",
					"    return `${randomAdjective} ${randomSubject} Group ${randomNumber}`;",
					"}",
					"",
					"    if (pm.environment.get(\"environment\") === \"local\") {",
					"        var baseURL = pm.environment.get(\"host\")",
					"        pm.variables.set(\"baseURL\", baseURL);",
					"    } else {",
					"        var baseURL = pm.environment.get(\"host\") + pm.variables.get(\"basePath\");",
					"        pm.variables.set(\"baseURL\", baseURL);",
					"    }",
					"",
					"function generateRandomDescription() {",
					"    const phrases = [",
					"        'Join this study group to collaborate and learn together.',",
					"        'In this group, we discuss various topics and share resources.',",
					"        'Looking for fellow learners to study together? Join us now!',",
					"        'We focus on interactive learning and knowledge sharing.',",
					"        'This study group is open to all levels of expertise.'",
					"    ];",
					"    ",
					"    const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];",
					"    return randomPhrase;",
					"}",
					"",
					"const groupName = generateRandomGroupName();",
					"const groupDescription = generateRandomDescription();",
					"",
					"pm.environment.set('group_name', groupName);",
					"pm.environment.set('group_description', groupDescription);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "refresh_token",
			"value": ""
		}
	]
}